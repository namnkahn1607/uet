// adv-programme.2
#include <iostream>
#include <vector>
using namespace std;

const vector<vector<string>> pattern = {
    { /* A */
        " #### ",
        "#    #",
        "#    #", 
        "######",
        "#    #",
        "#    #",
    },
    { /* B */
        "#    #",
        "######",
        "#    #",
        "#    #",
        "##### ",
    },
    { /* C */
        "######",
        "#     ",
        "#     ",
        "#     ",
        "#     ",
        "######",
    },
    { /* D */
        "##### ",
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        "##### ",
    },
    { /* E */
        "######",
        "#     ",
        "######",
        "#     ",
        "#     ",
        "######",
    },
    { /* F */
        "######",
        "#     ",
        "######",
        "#     ",
        "#     ",
        "#     ",
    },
    { /* G */
        " #### ",
        "#    #",
        "#     ",
        "#  ###",
        "#    #",
        " #### ",
    },
    { /* H */
        "#    #",
        "#    #",
        "######",
        "#    #",
        "#    #",
        "#    #",
    },
    { /* I */
        "  #   ",
        "  #   ",
        "  #   ",
        "  #   ",
        "  #   ",
        "  #   ",
    },
    { /* J */
        "######",
        "     #",
        "     #",
        "#    #",
        "#    #",
        " #### ",
    },
    { /* K */
        "#    #",
        "#   # ",
        "####  ",
        "#  #  ",
        "#   # ",
        "#    #",
    },
    { /* L */
        "#     ",
        "#     ",
        "#     ",
        "#     ",
        "#     ",
        "######",
    },
    { /* M */
        "#    #",
        "##  ##",
        "# ## #",
        "#    #",
        "#    #",
        "#    #",
    },
    { /* N */
        "#    #",
        "##   #",
        "# #  #",
        "#  # #",
        "#   ##",
        "#    #",
    },
    { /* O */
        " #### ",
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        " #### ",
    },
    { /* P */
        "##### ",
        "#    #",
        "#    #",
        "##### ",
        "#     ",
        "#     ",
    },
    { /* Q */
        " #### ",
        "#    #",
        "#    #",
        "#  # #",
        "#   ##",
        " #### ",
    },
    { /* R */
        "##### ",
        "#    #",
        "#    #",
        "##### ",
        "#   # ",
        "#    #",
    },
    { /* S */
        " #####",
        "#     ",
        " #### ",
        "     #",
        "     #",
        "##### ",
    },
    { /* T */
        "##### ",
        "  #   ",
        "  #   ",
        "  #   ",
        "  #   ",
        "  #   ",
    },
    { /* U */
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        " #### ",
    },
    { /* V */
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        " #  # ",
        "  ##  ",
    },
    { /* W */
        "#    #",
        "#    #",
        "#    #",
        "#    #",
        "# ## #",
        " #  # ",
    },
    { /* X */
        "#    #",
        " #  # ",
        "  ##  ",
        "  ##  ",
        " #  # ",
        "#    #",
    },
    { /* Y */
        "#   # ",
        "#   # ",
        " # #  ",
        "  #   ",
        "  #   ",
        "  #   ",
    },
    { /* Z */
        "######",
        "    # ",
        "   #  ",
        "  #   ",
        " #    ",
        "######",
    }
};

class cpp {
public:
    static vector<vector<string>> solve(string &str) {
        vector<vector<string>> ans;

        for (char &c : str) {
            c = tolower(c);
            int x = c - 'a';
            ans.emplace_back(pattern[x]);
        }
    }
};

int main() {
    string str;
    getline(cin, str);

    vector<vector<string>> ans = cpp::solve(str);

    for (int i = 0; i < 6; ++i) {
        for (vector<string> &vs : ans)
            cout << vs[i] << " ";
        
        cout << '\n';
    }
    
    return 0;
}